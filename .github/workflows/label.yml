# This is a basic workflow to help you get started with Actions

name: Labelling

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]
    types: [opened,reopened,submitted]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  labelling:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Add step per team to label them
      - name: Add CG Team labels
        uses: andymckay/labeler@master
        if: contains(fromJson('["nereagit", "test"]'), github.event.pull_request.user.login)
        with:
          add-labels: "CG Team"
          ignore-if-labeled: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add Offline Team labels
        uses: andymckay/labeler@master
        if: contains(fromJson('["nereagit", "test"]'), github.event.pull_request.user.login)
        with:
          add-labels: "Offline Team"
          ignore-if-labeled: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add B2B Team labels
        uses: andymckay/labeler@master
        if: contains(fromJson('["nereagit", "test"]'), github.event.pull_request.user.login)
        with:
          add-labels: "B2B Team"
          ignore-if-labeled: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  reviews:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      #Fails only non admins by checking the PR status 
      - name: Require Review
        if: ${{!github.event.pull_request.review_requested && !contains(fromJson('["adminUser1", "adminUser2"]'), github.event.pull_request.user.login)}}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('A review is required in this PR.')
      
      #PR Approval required for all non-admin users when the PR has been submitted
      #- name: Approval Required
      #  if: ${{!contains(fromJson('["adminUser2", "adminUser2"]'), github.event.pull_request.user.login) && github.event.pull_request_review.submitted && github.event.review.state == 'approved'}}
      #  uses: actions/github-script@v3
      #  with:
      #    script: |
      #        core.setFailed('An approval is needed from the pull request reviwers.')
           



      
     
